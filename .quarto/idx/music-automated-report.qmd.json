{"title":"Weekly Top Artists","markdown":{"yaml":{"title":"Weekly Top Artists","format":{"html":{"code-fold":true}},"jupyter":"python3"},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n\nThis report provides an automated analysis of the top artists from the past week based on total plays. The data is sourced directly from an API and is visualized using an interactive plot. The goal is to provide a quick yet insightful overview of the most popular artists during the week.\n\nWe start by fetching the data from the [music-to-scrape](https://music-to-scrape.org/) API. Then, we visualize it using Python.\n\n## Extracting data from API\n\nTo begin, we retrieve the latest data on the top 5 artists from the API. The data includes the artist names and the total number of plays they received over the past week.\n\n*The code:*\n\n- The function `get_top_artists_dataframe()` is defined to extract the top 5 artists from the API. \n    - It begins by sending a GET request to the API endpoint. If the request is successful, the JSON data is parsed to retrieve the artist names and their play counts. \n    - The `unix_start` timestamp is converted to a readable date format to determine the week number for the report.\n    - The data is structured into a Pandas DataFrame, making it easier to manipulate and visualize later on.\n    - If the API request fails, the function will print an error message with the HTTP status code.\n- The data from the most recent week is shown with running the function `get_top_artists_dataframe()`\n\n\n```{python}\n# Import the required libraries\nimport requests\nimport json\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom datetime import datetime \nimport plotly.express as px\n\n# Function to get top 5 artists with total plays\n\ndef get_top_artists_dataframe():\n    # Specify the URL of the API\n    api_url = \"https://api.music-to-scrape.org\"\n    \n    # Send an HTTP GET request to the API\n    response = requests.get(api_url+'/charts/top-artists')\n    \n    # Check if the request was successful\n    if response.status_code == 200:\n        # Parse the JSON response\n        data = response.json()\n        \n        # Extract the chart data and timestamps\n        artists_data = data.get('chart', [])\n        unix_start = data.get('unix_start')\n\n        # Convert the unix_start timestamp to a datetime object\n        start_date = datetime.utcfromtimestamp(unix_start)\n        week_number = start_date.isocalendar().week\n        \n        # Create lists to hold artist names and plays\n        artist_names = []\n        total_plays = []\n        \n        # Populate the lists with data\n        for item in artists_data:\n            artist_names.append(item['name'])\n            total_plays.append(item['plays'])\n        \n        # Create a DataFrame from the lists\n        df = pd.DataFrame({\n            'Artist': artist_names,\n            'Total Plays': total_plays,\n            'Week Number': week_number\n        })\n        return df\n    else:\n        print(\"Failed to retrieve data. Status code:\", response.status_code)\n        return None\n\n# Dataset \nget_top_artists_dataframe()\n```\n\n\n## Create interactive barplot\n\nThe next step is to visualize the top 5 artists. An interactive bar plot (see@bar-plot) is created to provide a dynamic view of the data, allowing users to engage with the chart by hovering over the bars to see more details about the aritsts and their total play counts. \n\n*The code:*\n\n- The `interactive_bar_plot()` function generates an interactive bar chart using the `Plotly` library. \n    - It ensures that the data is present\n    - It retrieves the week number for context.\n    - The data is sorted by total plays to highlight the most popular artists at the top.\n    - A title dynamically reflects the week number, ensuring that each week's report is accurately labeled. \n\n\n\n```{python}\n#| label: bar-plot\n\ndef interactive_bar_plot(df):\n    if df is not None:\n\n        # Get week number from the DataFrame (to include in dynamic title)\n        week_number = get_top_artists_dataframe()[\"Week Number\"].iloc[0]\n\n        # Sort the DataFrame by 'Total Plays' in descending order \n        df = df.sort_values(by='Total Plays', ascending=False)\n\n        # Create an interactive bar chart with Plotly\n        fig = px.bar(get_top_artists_dataframe(), x='Total Plays', y='Artist', \n                 title=f'Total Plays for Top 5 Artists - Week {week_number}',\n                 labels={'Total Plays':'Total Plays'},\n                 hover_data={'Artist':True, 'Total Plays':True, 'Week Number':False})\n\n        fig.update_layout(xaxis_title='Artist', yaxis_title='Total Plays',\n                      xaxis_tickangle=-45, template='plotly_white')\n        fig.show()\n\n# Create plot with recent data extracted from API\ninteractive_bar_plot(get_top_artists_dataframe())\n\n```\n\n","srcMarkdownNoYaml":"\n\n## Introduction \n\nThis report provides an automated analysis of the top artists from the past week based on total plays. The data is sourced directly from an API and is visualized using an interactive plot. The goal is to provide a quick yet insightful overview of the most popular artists during the week.\n\nWe start by fetching the data from the [music-to-scrape](https://music-to-scrape.org/) API. Then, we visualize it using Python.\n\n## Extracting data from API\n\nTo begin, we retrieve the latest data on the top 5 artists from the API. The data includes the artist names and the total number of plays they received over the past week.\n\n*The code:*\n\n- The function `get_top_artists_dataframe()` is defined to extract the top 5 artists from the API. \n    - It begins by sending a GET request to the API endpoint. If the request is successful, the JSON data is parsed to retrieve the artist names and their play counts. \n    - The `unix_start` timestamp is converted to a readable date format to determine the week number for the report.\n    - The data is structured into a Pandas DataFrame, making it easier to manipulate and visualize later on.\n    - If the API request fails, the function will print an error message with the HTTP status code.\n- The data from the most recent week is shown with running the function `get_top_artists_dataframe()`\n\n\n```{python}\n# Import the required libraries\nimport requests\nimport json\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom datetime import datetime \nimport plotly.express as px\n\n# Function to get top 5 artists with total plays\n\ndef get_top_artists_dataframe():\n    # Specify the URL of the API\n    api_url = \"https://api.music-to-scrape.org\"\n    \n    # Send an HTTP GET request to the API\n    response = requests.get(api_url+'/charts/top-artists')\n    \n    # Check if the request was successful\n    if response.status_code == 200:\n        # Parse the JSON response\n        data = response.json()\n        \n        # Extract the chart data and timestamps\n        artists_data = data.get('chart', [])\n        unix_start = data.get('unix_start')\n\n        # Convert the unix_start timestamp to a datetime object\n        start_date = datetime.utcfromtimestamp(unix_start)\n        week_number = start_date.isocalendar().week\n        \n        # Create lists to hold artist names and plays\n        artist_names = []\n        total_plays = []\n        \n        # Populate the lists with data\n        for item in artists_data:\n            artist_names.append(item['name'])\n            total_plays.append(item['plays'])\n        \n        # Create a DataFrame from the lists\n        df = pd.DataFrame({\n            'Artist': artist_names,\n            'Total Plays': total_plays,\n            'Week Number': week_number\n        })\n        return df\n    else:\n        print(\"Failed to retrieve data. Status code:\", response.status_code)\n        return None\n\n# Dataset \nget_top_artists_dataframe()\n```\n\n\n## Create interactive barplot\n\nThe next step is to visualize the top 5 artists. An interactive bar plot (see@bar-plot) is created to provide a dynamic view of the data, allowing users to engage with the chart by hovering over the bars to see more details about the aritsts and their total play counts. \n\n*The code:*\n\n- The `interactive_bar_plot()` function generates an interactive bar chart using the `Plotly` library. \n    - It ensures that the data is present\n    - It retrieves the week number for context.\n    - The data is sorted by total plays to highlight the most popular artists at the top.\n    - A title dynamically reflects the week number, ensuring that each week's report is accurately labeled. \n\n\n\n```{python}\n#| label: bar-plot\n\ndef interactive_bar_plot(df):\n    if df is not None:\n\n        # Get week number from the DataFrame (to include in dynamic title)\n        week_number = get_top_artists_dataframe()[\"Week Number\"].iloc[0]\n\n        # Sort the DataFrame by 'Total Plays' in descending order \n        df = df.sort_values(by='Total Plays', ascending=False)\n\n        # Create an interactive bar chart with Plotly\n        fig = px.bar(get_top_artists_dataframe(), x='Total Plays', y='Artist', \n                 title=f'Total Plays for Top 5 Artists - Week {week_number}',\n                 labels={'Total Plays':'Total Plays'},\n                 hover_data={'Artist':True, 'Total Plays':True, 'Week Number':False})\n\n        fig.update_layout(xaxis_title='Artist', yaxis_title='Total Plays',\n                      xaxis_tickangle=-45, template='plotly_white')\n        fig.show()\n\n# Create plot with recent data extracted from API\ninteractive_bar_plot(get_top_artists_dataframe())\n\n```\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"music-automated-report.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.56","theme":"darkly","fontsize":"1.3em","fontcolor":"#e0e0e0","backgroundcolor":"#121212","linkcolor":"#76c7c0","mainfont":"Helvetica, sans-serif","monofont":"Monaco, monospace","monobackgroundcolor":"#333333","linestretch":1.7,"margin-left":"2.5em","margin-right":"2.5em","margin-top":"2.5em","margin-bottom":"2.5em","code-block-bg":"#1a1a1a","code-block-border-left":"#76c7c0","title":"Weekly Top Artists","jupyter":"python3"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}